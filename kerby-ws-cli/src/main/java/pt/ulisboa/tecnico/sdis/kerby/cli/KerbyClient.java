package pt.ulisboa.tecnico.sdis.kerby.cli;

import com.sun.xml.ws.client.ClientTransportException;
import pt.ulisboa.tecnico.sdis.kerby.BadTicketRequest_Exception;
import pt.ulisboa.tecnico.sdis.kerby.KerbyPortType;
import pt.ulisboa.tecnico.sdis.kerby.KerbyService;
import pt.ulisboa.tecnico.sdis.kerby.SessionKeyAndTicketView;

import javax.xml.ws.BindingProvider;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Random;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class KerbyClient{
    public static int DEFAULT_MAX_RETRIES = 5;
    private int maxRetries = DEFAULT_MAX_RETRIES;
    private static final String KERBY_WS_URL = "http://localhost:8888/kerby";

	/** WS service */
	KerbyService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	KerbyPortType port = null;


	/** WS name */
	private String wsName = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	/** output option **/
	private boolean verbose = false;

	/** constructor with provided web service URL */
	public KerbyClient() {
		this.wsURL = KERBY_WS_URL;
		createStub();
	}

	/** Stub creation and configuration */
	private void createStub() {
		service = new KerbyService();
		port = service.getKerbyPort();

		if (wsURL != null) {
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

    private Object runPortMethod(Method method, int maxRetries, int delayBetweenRetries, Object... args){
        for(int i = 0; i < maxRetries; i++){
            try{
                return method.invoke(port, args);
            } catch(IllegalAccessException e){
                e.printStackTrace();
            } catch(InvocationTargetException e){
                if(e.getCause() instanceof ClientTransportException){
                    try{
                        printKerbyUnreacheableErrorMessageRetry();
                        Thread.sleep(delayBetweenRetries);
                    } catch(InterruptedException ie){
                        ie.printStackTrace();
                    }
                }
            }
        }
        System.err.println("Stopping...");
        System.exit(-1);
        return null;
    }

    private Object runPortMethod(Method method, Object... args){
        return runPortMethod(method, maxRetries, 1000, args);
    }

	public SessionKeyAndTicketView requestTicket(String client, String server, long nounce, int ticketDuration)
			throws BadTicketRequest_Exception{
        try{
            Method method = KerbyPortType.class.getMethod("requestTicket", String.class, String.class, long.class, int.class);
            return (SessionKeyAndTicketView) runPortMethod(method, client, server, nounce , ticketDuration);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
	}


    public void revokeKey(String keyOwner) {
        try{
            Method method = KerbyPortType.class.getMethod("revokeKey", String.class);
            runPortMethod(method, keyOwner);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
    }

    public String generateDHPassword(String client){
        Random rand = new Random();
        // generate public ints to be shared, base g, and modulus p
        int g = rand.nextInt(10000) + 100;
        int p = rand.nextInt(10000) + 10;

        // generate our secret value
        int myPower = rand.nextInt(10000);
        int valueToShare = ((int) Math.pow(g, myPower)) % p;

        int serverValue = 0;
        try{
            Method method = KerbyPortType.class.getMethod("generateDHPassword", String.class, Integer.class, int.class, int.class);
            serverValue = (Integer) runPortMethod(method, client, valueToShare, g, p);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }

        int finalValue = ((int) Math.pow(serverValue, myPower)) % p;
        System.err.println(client + " : Generated DH number: " + finalValue);

        return Integer.toString(finalValue);
    }

    private void printKerbyUnreacheableErrorMessageRetry(){
	    System.err.println("Kerby-ws is unreachable, retrying...");
    }

    public int getMaxRetries(){
        return maxRetries;
    }

    public void setMaxRetries(int aMaxRetries){
        maxRetries = aMaxRetries;
    }

}
