package sirs.ws.cli;

import com.sun.xml.ws.client.ClientTransportException;
import common.sirs.ws.NoteDigestView;
import common.sirs.ws.NoteView;
import handlers.PrettyLogHandler;
import pt.ulisboa.tecnico.sdis.kerby.TicketCollection;
import sirs.Security;
import sirs.web.ws.WebPortType;
import sirs.web.ws.WebService;
import sirs.web.ws.WebpageDigestView;
import sirs.ws.cli.handlers.KerbistWebClientHandler;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.Handler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Key;
import java.util.*;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class WebClient {
    public static final String WEB_SERVER_NAME = "WEB_SERVER";
    private static final int DEFAULT_RETRY_DELAY = 1000;
    // variables for secure channels
    private String privatePassword = null;
    private Map<String, Key> sessionKeyMap;


    public static int DEFAULT_MAX_RETRIES = 5;
    private int maxRetries = DEFAULT_MAX_RETRIES;

    // List of valid kerby tickets
    private TicketCollection ticketCollection;

    public static final String DEFAULT_CLIENT_NAME = "WEB_CLIENT";
    public String webClientName;

    /** WS service */
	WebService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	WebPortType port = null;

	/** WS end point address */
	public static String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	/** constructor with provided web service URL */
	public WebClient(String wsURL){
		this.wsURL = wsURL;
        ticketCollection = new TicketCollection();
        sessionKeyMap = new HashMap<>();
        webClientName = DEFAULT_CLIENT_NAME + "_" + generateRandomString(32);

		createStub();
	}

	public WebClient(String wsURL, String clientName){
	    this(wsURL);
	    webClientName = clientName;
    }

	/** Stub creation and configuration */
	private void createStub() {
		service = new WebService();
		port = service.getWebPort();

		if (wsURL != null) {
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);

            // Define a handler chain for the client
            List<Handler> handlerChain = new ArrayList<>();
            System.out.println("defining web kerbist client handler");
            KerbistWebClientHandler kerbistWebClientHandler = new KerbistWebClientHandler(webClientName, privatePassword, ticketCollection, sessionKeyMap);
            handlerChain.add(new PrettyLogHandler());
            handlerChain.add(kerbistWebClientHandler);
            handlerChain.add(new PrettyLogHandler());
            bindingProvider.getBinding().setHandlerChain(handlerChain);
		}
	}

	public List<NoteView> takeRecentlyChangedNotes(){
        try{
            Method method = WebPortType.class.getMethod("takeRecentlyChangedNotes");
            return (List<NoteView>) runPortMethodMaxRetries(method,maxRetries);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
    }

    public List<NoteDigestView> takeRecentlyChangedNoteDigests(){
        List<NoteView> noteViews  = takeRecentlyChangedNotes();
        List<NoteDigestView> noteDigestViews = new ArrayList<>();

        for(int i = 0; i < noteViews.size(); i++){
            noteDigestViews.add(Security.buildNoteDigestView(noteViews.get(i)));
        }

        return noteDigestViews;
    }


    private Object runPortMethodMaxRetries(Method method, int maxRetries, Object... args){
        for(int i = 0; i < maxRetries; i++){
            try{
                Object out = method.invoke(port, args);
                sleep(500);
                return out;
            }catch(InvocationTargetException e){
                System.err.println("WebClient: caught invocation exception");
                System.err.println("cause: " + e.getCause());
                if(e.getCause() instanceof ClientTransportException){
                    System.err.println("caught clienttransport exception");
                    sleep(DEFAULT_RETRY_DELAY);
                    // TODO print weberror
                }
            } catch(IllegalAccessException e){
                e.printStackTrace();
            }
        }
        System.err.println("Stopping...");
        System.exit(-1);
        return null;
    }


    public String testPing(String inputMessage) {
        try{
            Method method = WebPortType.class.getMethod("testPing", String.class);
            return (String) runPortMethodMaxRetries(method,maxRetries, inputMessage);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
    }

    public void testClear(){
        try{
            Method method = WebPortType.class.getMethod("testClear");
            runPortMethodMaxRetries(method, maxRetries);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
    }


    private String generateRandomString(int size){
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        Random rand = new Random(System.currentTimeMillis());
        String newString = "";

        for(int i = 0; i < size; i++){
            newString += chars.charAt(rand.nextInt(chars.length()));
        }

        return newString;

    }

    public List<WebpageDigestView> getWebpageDigests(){
        try{
            Method method = WebPortType.class.getMethod("getWebpageDigests");
            return (List<WebpageDigestView>) runPortMethodMaxRetries(method,maxRetries);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
    }


    public void setMaxRetries(int maxRetries){
	    this.maxRetries = maxRetries;
    }

    public int getMaxRetries(){
        return maxRetries;
    }

    private void sleep(int duration){
        try{
            Thread.sleep(duration);
        } catch(InterruptedException e1){
            e1.printStackTrace();
        }
    }

    public void recoverWebPages(List<WebpageDigestView> pagesToRecover){
        try{
            Method method = WebPortType.class.getMethod("recoverWebPages", List.class);
            runPortMethodMaxRetries(method,maxRetries, pagesToRecover);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
    }

}
