
package sirs.app.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AppPortType", targetNamespace = "http://ws.app.sirs/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AppPortType {


    /**
     * 
     * @param inputMessage
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "testPing", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.TestPing")
    @ResponseWrapper(localName = "testPingResponse", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.TestPingResponse")
    @Action(input = "http://ws.app.sirs/app-ws/testPingRequest", output = "http://ws.app.sirs/app-ws/testPingResponse")
    public String testPing(
        @WebParam(name = "input_message", targetNamespace = "")
        String inputMessage);

    /**
     * 
     * @param noteName
     * @return
     *     returns sirs.app.ws.NoteView
     * @throws NoteNotFound_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNoteByName", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.GetNoteByName")
    @ResponseWrapper(localName = "getNoteByNameResponse", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.GetNoteByNameResponse")
    @Action(input = "http://ws.app.sirs/app-ws/getNoteByNameRequest", output = "http://ws.app.sirs/app-ws/getNoteByNameResponse", fault = {
        @FaultAction(className = NoteNotFound_Exception.class, value = "http://ws.app.sirs/app-ws/getNoteByName/Fault/NoteNotFound")
    })
    public NoteView getNoteByName(
        @WebParam(name = "noteName", targetNamespace = "")
        String noteName)
        throws NoteNotFound_Exception
    ;

    /**
     * 
     * @param noteView
     * @throws NotAllowed_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateNote", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.UpdateNote")
    @ResponseWrapper(localName = "updateNoteResponse", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.UpdateNoteResponse")
    @Action(input = "http://ws.app.sirs/app-ws/updateNote", output = "http://ws.app.sirs/app-ws/updateNoteResponse", fault = {
        @FaultAction(className = NotAllowed_Exception.class, value = "http://ws.app.sirs/app-ws/getNoteByName/Fault/NotAllowed")
    })
    public void updateNote(
        @WebParam(name = "noteView", targetNamespace = "")
        NoteView noteView)
        throws NotAllowed_Exception
    ;

    /**
     * 
     */
    @WebMethod(operationName = "test_clear")
    @RequestWrapper(localName = "test_clear", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.TestClear")
    @ResponseWrapper(localName = "test_clearResponse", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.TestClearResponse")
    @Action(input = "http://ws.app.sirs/app-ws/test_clearRequest", output = "http://ws.app.sirs/app-ws/test_clearResponse")
    public void testClear();

    /**
     * 
     * @param userInitialPoints
     */
    @WebMethod(operationName = "test_init")
    @RequestWrapper(localName = "test_init", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.TestInit")
    @ResponseWrapper(localName = "test_initResponse", targetNamespace = "http://ws.app.sirs/", className = "sirs.app.ws.TestInitResponse")
    @Action(input = "http://ws.app.sirs/app-ws/test_initRequest", output = "http://ws.app.sirs/app-ws/test_initResponse")
    public void testInit(
        @WebParam(name = "user_initial_points", targetNamespace = "")
        int userInitialPoints);

}
