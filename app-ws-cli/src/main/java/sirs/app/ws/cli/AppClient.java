package sirs.app.ws.cli;


import com.sun.xml.ws.client.ClientTransportException;
import common.sirs.ws.NoteView;
import pt.ulisboa.tecnico.sdis.kerby.TicketCollection;
import sirs.app.ws.*;
import sirs.app.ws.cli.handlers.KerbistAppClientHandler;
import sirs.app.ws.cli.handlers.PrettyLogHandler;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.Handler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Key;
import java.util.*;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class AppClient{
    private static final int DEFAULT_RETRY_DELAY = 1000;
    // variables for secure channels
    private String privatePassword = null;
    private Map<String, Key> sessionKeyMap;


    public static int DEFAULT_MAX_RETRIES = 5;
    private int maxRetries = DEFAULT_MAX_RETRIES;

    // List of valid kerby tickets
    private TicketCollection ticketCollection;

    public static final String DEFAULT_CLIENT_NAME = "APP_CLIENT";
    public String appClientName;

    /** WS service */
	AppService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	AppPortType port = null;

	/** WS end point address */
	public static String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	/** constructor with provided web service URL */
	public AppClient(String wsURL){
		this.wsURL = wsURL;
        ticketCollection = new TicketCollection();
        sessionKeyMap = new HashMap<>();
        appClientName = DEFAULT_CLIENT_NAME + "_" + generateRandomString(32);

		createStub();
	}

	public AppClient(String wsURL, String clientName){
	    this(wsURL);
	    appClientName = clientName;
    }

	/** Stub creation and configuration */
	private void createStub() {
		service = new AppService();
		port = service.getAppPort();

		if (wsURL != null) {
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);

			// Define a handler chain for the client
            List<Handler> handlerChain = new ArrayList<>();
            System.out.println("defining kerbist client app handler");
            KerbistAppClientHandler kerbistAppClientHandler = new KerbistAppClientHandler(appClientName, privatePassword, ticketCollection, sessionKeyMap);
            handlerChain.add(kerbistAppClientHandler);
            handlerChain.add(new PrettyLogHandler());
            bindingProvider.getBinding().setHandlerChain(handlerChain);
            System.out.println("set handler chain");
		}
	}

    private Object runPortMethodMaxRetries(Method method, int maxRetries, Object... args){
        for(int i = 0; i < maxRetries; i++){
            try{
                return method.invoke(port, args);
            }catch(InvocationTargetException e){
                System.err.println("AppClient: caught invocation exception");
                System.err.println("cause: " + e.getCause());
                if(e.getCause() instanceof ClientTransportException){
                    System.err.println("caught clienttransport exception");
                    sleep(DEFAULT_RETRY_DELAY);
                    printAppServerUnreacheableErrorMessageRetry(wsURL);
                }
            } catch(IllegalAccessException e){
                e.printStackTrace();
            }
        }
        System.err.println("Stopping...");
        System.exit(-1);
        return null;
    }


    public NoteView getNoteByName(String noteName) throws NoteNotFound_Exception{
        try{
            Method method = AppPortType.class.getMethod("getNoteByName", String.class);
            return (NoteView) runPortMethodMaxRetries(method, maxRetries, noteName);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
    }

    public List<NoteView> getNotesByUser(String username){
        try{
            Method method = AppPortType.class.getMethod("getNotesByUser", String.class);
            return (List<NoteView>) runPortMethodMaxRetries(method, maxRetries , username);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
    }


    public void updateNote(NoteView noteView) throws NotAllowed_Exception{
        try{
            Method method = AppPortType.class.getMethod("updateNote", NoteView.class);
            runPortMethodMaxRetries(method, maxRetries, noteView);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
    }

    public String testPing(String inputMessage) {
        try{
            Method method = AppPortType.class.getMethod("testPing", String.class);
            return (String) runPortMethodMaxRetries(method,maxRetries, inputMessage);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
        return null;
    }

    public void testClear(){
        try{
            Method method = AppPortType.class.getMethod("testClear");
            runPortMethodMaxRetries(method, maxRetries);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
    }

    public void testInit(){
        try{
            Method method = AppPortType.class.getMethod("testInit");
            runPortMethodMaxRetries(method, maxRetries);
        } catch(NoSuchMethodException e){
            e.printStackTrace();
        }
    }

    private String generateRandomString(int size){
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        Random rand = new Random(System.currentTimeMillis());
        String newString = "";

        for(int i = 0; i < size; i++){
            newString += chars.charAt(rand.nextInt(chars.length()));
        }

        return newString;

    }
    private void printAppServerUnreacheableErrorMessageRetry(String wsUrl){
        System.err.println(wsUrl + " is unreachable, retrying...");
    }

    public void setMaxRetries(int maxRetries){
	    this.maxRetries = maxRetries;
    }

    public int getMaxRetries(){
        return maxRetries;
    }

    private void sleep(int duration){
        try{
            Thread.sleep(duration);
        } catch(InterruptedException e1){
            e1.printStackTrace();
        }
    }
}
