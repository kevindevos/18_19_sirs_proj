package sirs.app.ws.cli;


import sirs.app.ws.*;

import javax.xml.ws.BindingProvider;
import java.util.List;
import java.util.Map;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class AppClient implements AppPortType {

	/** WS service */
	AppService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	AppPortType port = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public AppClient(String wsURL){
		this.wsURL = wsURL;
		createStub();
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new AppService();
		port = service.getAppPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

	@Override
	public String testPing(String inputMessage) {
		return port.testPing(inputMessage);
	}

    @Override
    public NoteView getNoteByName(String noteName) throws NoteNotFound_Exception{
	    return port.getNoteByName(noteName);
    }

    @Override
    public List<NoteView> getNotesByUser(String username){
        return port.getNotesByUser(username);
    }

    @Override
    public void updateNote(NoteView noteView) throws NotAllowed_Exception{
        port.updateNote(noteView);
    }

    @Override
    public void testClear(){
        port.testClear();
    }

    @Override
    public void testInit(){
        port.testInit();
    }



}
