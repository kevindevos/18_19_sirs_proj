package sirs.app.ws.cli;


import pt.ulisboa.tecnico.sdis.kerby.TicketCollection;
import sirs.app.ws.*;
import sirs.app.ws.cli.handlers.KerbistAppClientHandler;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.Handler;
import java.security.Key;
import java.util.*;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class AppClient{
    // variables for secure channels
    private String privatePassword = null;
    private Map<String, Key> sessionKeyMap;

    // List of valid kerby tickets
    private TicketCollection ticketCollection;

    public static final String DEFAULT_CLIENT_NAME = "APP_CLIENT";
    public String appClientName;

    /** WS service */
	AppService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	AppPortType port = null;

	/** WS end point address */
	public static String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}


	/** constructor with provided web service URL */
	public AppClient(String wsURL){
		this.wsURL = wsURL;
        ticketCollection = new TicketCollection();
        sessionKeyMap = new HashMap<>();
        appClientName = DEFAULT_CLIENT_NAME + "_" + generateRandomString(64);

		createStub();
	}

	public AppClient(String wsURL, String clientName){
	    this(wsURL);
	    appClientName = clientName;
    }

	/** Stub creation and configuration */
	private void createStub() {
		service = new AppService();
		port = service.getAppPort();

		if (wsURL != null) {
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);

			// Define a handler chain for the client
            List<Handler> handlerChain = new ArrayList<>();
            KerbistAppClientHandler kerbistAppClientHandler = new KerbistAppClientHandler(appClientName, privatePassword, ticketCollection, sessionKeyMap);

            handlerChain.add(kerbistAppClientHandler);
            bindingProvider.getBinding().setHandlerChain(handlerChain);
		}
	}

	public String testPing(String inputMessage) {
		return port.testPing(inputMessage);
	}

    public NoteView getNoteByName(String noteName) throws NoteNotFound_Exception{
	    return port.getNoteByName(noteName);
    }

    public List<NoteView> getNotesByUser(String username){
        return port.getNotesByUser(username);
    }

    public void updateNote(NoteView noteView) throws NotAllowed_Exception{
        port.updateNote(noteView);
    }

    public void testClear(){
        port.testClear();
    }

    public void testInit(){
        port.testInit();
    }

    private String generateRandomString(int size){
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        Random rand = new Random(System.currentTimeMillis());
        String newString = "";

        for(int i = 0; i < size; i++){
            newString += chars.charAt(rand.nextInt(chars.length()));
        }

        return newString;

    }


}
